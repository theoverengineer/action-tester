name: Build Release

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'documentation/**'

env:
  SERVER_PROJECT: '*server'
  RELEASE_DEPLOY: true
  RELEASE_DEPLOY_ENVIRONMENT: 'test'
  DOCKER_DEPLOY_DIRECTORY: './deploy'

  RELEASE_CONTAINER_FULL_NAME: ghcr.io/${{ github.repository }}
  RELEASE_CONTAINER_LABEL: ${{ github.event.repository.name }}
  EXTERNAL_PORT: 3000

  # CONTAINER_TAG: ghcr.io/${{ github.repository }}-dev:latest
  # CONTAINER_LABEL: ${{ github.event.repository.name }}-dev

concurrency:
  group: build-release-${{github.ref}}
  cancel-in-progress: false

jobs:
  # deploy-docker-image:
  #   name: Deploy Docker Image
  #   runs-on: ubuntu-latest

  #   outputs:
  #     releaseVersion: ${{steps.release-info.outputs.releaseVersion}}
  #     developmentVersion: ${{steps.release-info.outputs.developmentVersion}}
  #     sourceBranch: ${{steps.release-info.outputs.sourceBranch}}
  #     releaseDockerImage: cfa-docker.jfrog.io/${{ steps.get_artifact.outputs.name }}
  #     releaseDockerTag: ${{ steps.get_artifact.outputs.version }}-${{ steps.get_short_sha.outputs.shortSha }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Get release info
  #       id: release-info
  #       run: |
  #         RELEASE_VERSION=$(jq -r '.releaseVersion' ./.github/config/release-info.json)
  #         echo "releaseVersion=$RELEASE_VERSION" >> $GITHUB_OUTPUT
  #         echo "releaseVersion=$RELEASE_VERSION"

  #         DEVELOPMENT_VERSION=$(jq -r '.developmentVersion' ./.github/config/release-info.json)
  #         echo "developmentVersion=$DEVELOPMENT_VERSION" >> $GITHUB_OUTPUT
  #         echo "developmentVersion=$DEVELOPMENT_VERSION"

  #         SOURCE_BRANCH=$(jq -r '.sourceBranch' ./.github/config/release-info.json)
  #         echo "sourceBranch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
  #         echo "sourceBranch=$SOURCE_BRANCH"

  #     - name: Setup Artifactory (maven)
  #       uses: approved-3rd-party-actions/maven-settings-xml-action@v22
  #       with:
  #         repositories: '[{ "id": "releases", "name": "maven", "url": "https://cfa.jfrog.io/cfa/maven", "releases": { "enabled": "true" }, "snapshots": { "enabled": "false" } },{ "id": "snapshots", "name": "maven", "url": "https://cfa.jfrog.io/cfa/maven", "releases": { "enabled": "false" }, "snapshots": { "enabled": "true" }}]'
  #         plugin_repositories: '[{ "id": "releases", "name": "maven", "url": "https://cfa.jfrog.io/cfa/maven", "releases": { "enabled": "true" }, "snapshots": { "enabled": "false" } },{ "id": "snapshots", "name": "maven", "url": "https://cfa.jfrog.io/cfa/maven", "releases": { "enabled": "false" }, "snapshots": { "enabled": "true" }}]'
  #         servers: '[{ "id": "releases", "username": "${ARTIFACTORY_USER}", "password": "${ARTIFACTORY_TOKEN}" },{ "id": "snapshots", "username": "${ARTIFACTORY_USER}", "password": "${ARTIFACTORY_TOKEN}" }]'

  #     - name: Setup Artifactory (npm)
  #       run: |
  #         npm config set registry https://cfa.jfrog.io/cfa/api/npm/npm/
  #         npm config set //cfa.jfrog.io/cfa/api/npm/npm/:_auth $(echo ${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_TOKEN }} | base64 -w 0)

  #     - name: Cache Maven Repository
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.m2/repository
  #           !~/.m2/repository/**/*SNAPSHOT*
  #         key: ${{ runner.os }}-m2-repository-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2-repository-

  #     - name: Get Maven artifact
  #       id: get_artifact
  #       working-directory: '${{ env.MAVEN_DIRECTORY }}'
  #       run: |
  #         FINAL_NAME=$( cd ${SERVER_PROJECT}; mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout )
  #         NAME=$( cd ${SERVER_PROJECT}; mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout )
  #         VERSION=$( cd ${SERVER_PROJECT}; mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
  #         echo "final_name=$FINAL_NAME" >> $GITHUB_OUTPUT
  #         echo "name=$NAME" >> $GITHUB_OUTPUT
  #         echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-backend:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        working-directory: backend
        run: npm ci

      - name: Build Project
        working-directory: backend
        run: npm run build --if-present

      - uses: actions/upload-artifact@v4
        with:
          name: be-dist
          path: backend/dist/

  package-docker-image:
    name: Package Docker Image
    runs-on: ubuntu-latest
    needs: build-backend

    outputs:
      releaseVersion: ${{steps.release-info.outputs.releaseVersion}}
      developmentVersion: ${{steps.release-info.outputs.developmentVersion}}
      sourceBranch: ${{steps.release-info.outputs.sourceBranch}}
      releaseDockerImage: ghcr.io/${{ github.repository }} cfa-docker.jfrog.io/${{ steps.get_artifact.outputs.name }}
      releaseDockerTag: ${{ steps.get_artifact.outputs.version }}-${{ steps.get_short_sha.outputs.shortSha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release info
        id: release-info
        run: |
          RELEASE_VERSION=$(jq -r '.releaseVersion' ./.github/config/release-info.json)
          echo "releaseVersion=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "releaseVersion=$RELEASE_VERSION"

          RELEASE_VERSION_STRICT=$(jq -r '.releaseVersionStrict' ./.github/config/release-info.json)
          echo "releaseVersionStrict=$RELEASE_VERSION_STRICT" >> $GITHUB_OUTPUT
          echo "releaseVersionStrict=$RELEASE_VERSION_STRICT"

          DEVELOPMENT_VERSION=$(jq -r '.developmentVersion' ./.github/config/release-info.json)
          echo "developmentVersion=$DEVELOPMENT_VERSION" >> $GITHUB_OUTPUT
          echo "developmentVersion=$DEVELOPMENT_VERSION"

          SOURCE_BRANCH=$(jq -r '.sourceBranch' ./.github/config/release-info.json)
          echo "sourceBranch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
          echo "sourceBranch=$SOURCE_BRANCH"

      - name: Checkout Code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: be-dist
          path: backend/dist/

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: backend/Dockerfile
          context: ./backend
          push: true
          tags: '${{ env.RELEASE_CONTAINER_FULL_NAME }}:${{ steps.release-info.outputs.releaseVersionStrict}}'

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [package-docker-image]
    env:
      RELEASE_VERSION: ${{needs.deploy-to-artifactory.outputs.releaseVersion}}
    steps:
      - name: Get Releases
        uses: kaliber5/action-get-release@v1
        id: get-release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          owner: ${{github.repository_owner}}
          repo: ${{github.event.repository.name}}
          tag_name: '${{env.RELEASE_VERSION}}'
          draft: true

      - name: Publish Release
        uses: octokit/request-action@v2.x
        id: publish-release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          route: PATCH /repos/{owner}/{repo}/releases/{release_id}
          owner: ${{github.repository_owner}}
          repo: ${{github.event.repository.name}}
          release_id: ${{steps.get-release.outputs.id}}
          draft: false

  deploy:
    name: Deploy Docker image
    runs-on: ubuntu-latest
    needs: [package-docker-image]
    steps:
      - name: Trigger Deploy Workflow
        uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: ${{github.repository_owner}}
          repo: ${{github.event.repository.name}}
          github_token: ${{ secrets.CFA_GITHUB_ACTIONS_ACCESS_TOKEN }}
          workflow_file_name: deploy.yml
          ref: ${{github.ref}}
          wait_interval: 1
          client_payload: |
            {
              "dockerImageName": "${{needs.deploy-to-artifactory.outputs.releaseDockerImage}}",
              "dockerImageTag": "${{needs.deploy-to-artifactory.outputs.releaseDockerTag}}",
              "environment": "${{ env.RELEASE_DEPLOY_ENVIRONMENT }}",
              "createPR": "false"
            }
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: false

  release-upstream:
    name: Release Upstream Repositories
    runs-on: ubuntu-latest
    needs: [package-backend]
    env:
      DEVELOPMENT_VERSION: ${{needs.deploy-to-artifactory.outputs.developmentVersion}}
      RELEASE_VERSION: ${{needs.deploy-to-artifactory.outputs.releaseVersion}}
      SOURCE_BRANCH: ${{needs.deploy-to-artifactory.outputs.sourceBranch}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trigger Downstream Release Workflows
        env:
          GITHUB_TOKEN: ${{ secrets.CFA_GITHUB_ACTIONS_ACCESS_TOKEN }}
        run: |
          MANIFEST_FILE=./.github/manifest.json

          if test -f "$MANIFEST_FILE"; then
            echo "Manifest file found at: $MANIFEST_FILE"

            DISPATCH_URLS=$(jq --raw-output '.upstreamRepos[] | select(.autoRelease == true) | "https://api.github.com/repos/" + .owner + "/" + .repo + "/actions/workflows/release.yml/dispatches"' "$MANIFEST_FILE")

            while IFS= read -r DISPATCH_URL; do
              echo "Calling $DISPATCH_URL"
              curl -X POST "$DISPATCH_URL" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                --data "{ \"ref\":\"${SOURCE_BRANCH}\", \"inputs\": { \"releaseVersion\": \"${RELEASE_VERSION}\", \"developmentVersion\": \"${DEVELOPMENT_VERSION}\" }"

            done <<<"$DISPATCH_URLS"
          else
            echo "No manifest file found at: $MANIFEST_FILE"
          fi
